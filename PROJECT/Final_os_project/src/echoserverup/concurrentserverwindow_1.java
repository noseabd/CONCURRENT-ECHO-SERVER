/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * concurrentserverwindow_1.java
 *
 * Created on Feb 9, 2014, 11:43:51 AM
 */
package echoserverup;

/**
 *
 * @author PULAK
 */
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
public class concurrentserverwindow_1 extends javax.swing.JFrame {

    /** Creates new form concurrent server window_1 */
    public concurrentserverwindow_1() {
        initComponents();
        new newserverclass_1(jTextArea1);
        
    }
    
   

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(echoserverup.EchoserverupApp.class).getContext().getResourceMap(concurrentserverwindow_1.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setRows(5);
        jTextArea1.setName("jTextArea1"); // NOI18N
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(129, 129, 129)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new concurrentserverwindow_1().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
class newserverclass_1 extends Thread
   {

    
      Thread t;
ServerSocket ss = null;
      Socket soc[]= new Socket[15] ;
        static   int  client_no=0;
        javax.swing.JTextArea src;
       newserverclass_1(javax.swing.JTextArea  jTextArea1)
      {
        try {
            ss = new ServerSocket(2000);
        } catch (IOException ex) {
            Logger.getLogger(newserverclass_1.class.getName()).log(Level.SEVERE, null, ex);
        }
        src=jTextArea1;
        src.setText("Server is running , waiting for client message ");
    t = new Thread(this);
    t.start();     
    }

    @Override
    public void run() {
              while(true)
        {
            try {
                //csw.alt="fghgfghppppp";
                System.out.print("-------------------------------------------------");
                soc[client_no] = ss.accept();
                System.out.print("-------------------------------------------------");
                if((soc[client_no]).isConnected())
                {
                    System.out.println("Connection accepted at :" + soc[client_no]);
                     new newserverclass_2(client_no,soc[client_no],src);
                    client_no++;
                    
                }
            } catch (IOException ex) {
                Logger.getLogger(newserverclass_1.class.getName()).log(Level.SEVERE, null, ex);
            }
            } 
            
            
        }  
       
   }
class newserverclass_2 extends Thread
{
    Thread t;
     DataOutputStream dos[] = new DataOutputStream[15];
      BufferedReader br[] = new BufferedReader[15];
     Socket soc[]= new Socket[15] ;
     int client_numm;
     javax.swing.JTextArea src1;
     String sentence=" ";
      newserverclass_2(int client_num,Socket s,javax.swing.JTextArea  jTextArea11) throws IOException
     {
         this.client_numm = client_num;
         
         System.out.println("Server waiting for message from the client");
         soc[client_numm] = s;
         dos[client_numm] = new DataOutputStream(soc[client_numm].getOutputStream());
         br[client_numm] = new BufferedReader(new InputStreamReader(soc[client_numm].getInputStream()));
         src1=jTextArea11;
          t = new Thread(this,"Demo Thread");
          t.start();
         
          
     }
     
   
        
 
    
    public void run() {
        try {
            String s=null;
            
            boolean quit = false;
            do {
                String msg = "";
                try {
                    s = br[client_numm].readLine();
                } catch (IOException ex) {
                    //Logger.getLogger(newServerClass_2.class.getName()).log(Level.SEVERE, null, ex);
                }
                int len = s.length();
                if (s.equals("exit")) {
                    quit = true;
                }
                for (int i = 0; i < len; i++) {
                    msg = msg + s.charAt(i);
                    dos[client_numm].write((byte)s.charAt(i));
                }
                sentence=sentence+"\nFrom client no "+client_numm +" : "+ msg;
                 src1.setText(sentence);
                System.out.println("From client no "+client_numm +" : "+ msg);
                dos[client_numm].write(13);
                dos[client_numm].write(10);
                dos[client_numm].flush();
            } while (!quit);
            dos[client_numm].close();
            soc[client_numm].close();
        } catch (IOException ex) {
            //Logger.getLogger(newServerClass_2.class.getName()).log(Level.SEVERE, null, ex);
        }
      
    }

    
    
}